# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Run tests (optional)
        run: |
          poetry run pytest --cov=./ --cov-report=xml
        continue-on-error: true  # Remove this for tests to be mandatory
      
      - name: Build release distributions
        run: |
          poetry build
      
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
  
  # Publish to TestPyPI for pre-releases and testing
  testpypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    # Only run for pre-releases or if the release tag contains 'test', 'alpha' or 'beta'
    if: github.event.release.prerelease || contains(github.event.release.tag_name, 'test') || contains(github.event.release.tag_name, 'alpha') || contains(github.event.release.tag_name, 'beta')
    permissions:
      id-token: write
    environment:
      name: testpypi
      url: https://test.pypi.org/p/slack-xblock
    
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: Publish release distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
  
  # Publish to PyPI for stable releases
  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    
    # Only run for stable releases (not pre-releases)
    if: !github.event.release.prerelease && !contains(github.event.release.tag_name, 'test') && !contains(github.event.release.tag_name, 'alpha') && !contains(github.event.release.tag_name, 'beta')
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      url: https://pypi.org/p/slack-xblock
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/slack-xblock/${{ github.event.release.name }}
    
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
